{"version":3,"sources":["../src/captcha-clientside-workflow.js"],"names":["window","addScriptToBody","captchaEndpoint","document","getElementsByClassName","length","url","captchaHelper","buildUrl","get","bodyElement","append","scriptInclude","addInitScriptToBody","captchaStyleName","initScriptIncluded","parentNode","removeChild","captchaId","getElementById","initScriptIncludeUrl","c","t","value","cs","showHtml","bdcElement","captchaHtmlUrl","ajax","response","status","Error","innerHTML","responseText","replace","body","getElementsByTagName","defaultSettings","String","prototype","trim","this","xhr","x","XMLHttpRequest","e","ActiveXObject","callback","readyState","onreadystatechange","open","send","params","p","key","push","test","join","className","script","createElement","src","Captcha","init","configuredSettings","settings","settingValue","bdcElements","getAttribute","getInstance","savedCaptchaStyleName","BotDetect","getInstanceByStyleName"],"mappings":"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","file":"captcha-clientside-workflow.min.js","sourcesContent":["(function(window) {\n  'use strict';\n  \n  var document = window.document,\n      bodyElement = document.body || document.getElementsByTagName('body')[0];\n  \n  var defaultSettings = {\n    captchaEndpoint: '' // e.g. '/user-app/botdetectcaptcha' or '/user-app/simplebotdetect.php' or '/user-app/BotDetectCaptcha.ashx'\n  };\n  \n  // Polyfill for trim() method\n  if (!String.prototype.trim) {\n    String.prototype.trim = function () {\n      return this.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n    };\n  }\n  \n  // Ajax helper.\n  var ajax = {\n    xhr: function() {\n      var x = null;\n      try { x = new XMLHttpRequest(); return x; } catch (e) {}\n      try { x = new ActiveXObject('MSXML2.XMLHTTP.5.0'); return x; } catch (e) {}\n      try { x = new ActiveXObject('MSXML2.XMLHTTP.4.0'); return x; } catch (e) {}\n      try { x = new ActiveXObject('MSXML2.XMLHTTP.3.0'); return x; } catch (e) {}\n      try { x = new ActiveXObject('MSXML2.XMLHTTP'); return x; } catch (e) {}\n      try { x = new ActiveXObject('Microsoft.XMLHTTP'); return x; } catch (e) {}\n      return x;\n    },\n    \n    get: function(url, callback) {\n      var xhr = this.xhr();\n      if (xhr && xhr.readyState === 0) {\n        xhr.onreadystatechange = function() {\n          if (xhr.readyState === 4) {\n            callback(xhr);\n          }\n        };\n        xhr.open('GET', url, true);\n        xhr.send();\n      }\n    }\n  };\n\n  // Captcha helper that provides useful functions.\n  var captchaHelper = {\n    // build url with parameters\n    buildUrl: function(url, params) {\n      var p = [];\n\n      for (var key in params) {\n        if (typeof key === 'string') {\n          p.push(key + '=' + params[key]);\n        }\n      }\n\n      var hasParamsPattern = /\\?+/g;\n      return hasParamsPattern.test(url) ? (url + '&' + p.join('&')) : (url + '?' + p.join('&')); \n    },\n\n    // create script include element\n    scriptInclude: function(url, className) {\n      var script = document.createElement('script');\n          script.src = url;\n          script.className = className;\n      return script;\n    }\n  };\n\n  // Add BotDetect client-side script include to body element.\n  function addScriptToBody(captchaEndpoint) {\n    if (document.getElementsByClassName('BDC_ScriptInclude').length !== 0) {\n      // BotDetect client-side script is already added\n      return;\n    }\n\n    // build BotDetect client-side script include url\n    var url = captchaHelper.buildUrl(captchaEndpoint, {\n      get: 'script-include'\n    });\n\n    bodyElement.append(captchaHelper.scriptInclude(url, 'BDC_ScriptInclude'));\n  }\n\n  // Add BotDetect init script include to body element.\n  function addInitScriptToBody(captchaStyleName, captchaEndpoint) {\n     // remove included BotDetect init script if it exists\n    var initScriptIncluded = document.getElementsByClassName('BDC_InitScriptInclude');\n    if (initScriptIncluded.length !== 0) {\n      initScriptIncluded[0].parentNode.removeChild(initScriptIncluded[0]);\n    }\n\n    var captchaId = document.getElementById('BDC_VCID_' + captchaStyleName);\n\n    if (!captchaId) {\n      return;\n    }\n\n    // build BotDetect init script include url.\n    var initScriptIncludeUrl = captchaHelper.buildUrl(captchaEndpoint, {\n      get: 'init-script-include',\n      c: captchaStyleName,\n      t: captchaId.value,\n      cs: '2'\n    });\n\n    bodyElement.append(captchaHelper.scriptInclude(initScriptIncludeUrl, 'BDC_InitScriptInclude'));\n  }\n  \n  // Display captcha html markup in view.\n  function showHtml(captchaStyleName, bdcElement, captchaEndpoint) {\n    // build captcha html url\n    var captchaHtmlUrl = captchaHelper.buildUrl(captchaEndpoint, {\n      get: 'html',\n      c: captchaStyleName\n    });\n\n    ajax.get(captchaHtmlUrl, function(response) {\n      if (response.status === 200) {\n        bdcElement.innerHTML = response.responseText.replace(/<script.*<\\/script>/g, '');\n        addInitScriptToBody(captchaStyleName, captchaEndpoint);\n      } else {\n        throw new Error('Can not load captcha html');\n      }\n    });\n  }\n  \n  var Captcha = Captcha || {};\n  \n  Captcha.init = function(configuredSettings) {\n    var settings = {};\n    configuredSettings = configuredSettings || {};\n    for (var key in defaultSettings) {\n      var settingValue = configuredSettings[key];\n      settings[key] = (typeof settingValue === 'undefined') ? defaultSettings[key] : settingValue;\n    }\n\n    // remove the '/' last char of url if it exists\n    settings.captchaEndpoint = settings.captchaEndpoint.replace(/\\/+$/i, '');\n\n    // show captcha html on DOM content loaded\n    document.onreadystatechange = function () {\n      if (document.readyState === \"complete\") {\n        // get botdetect-captcha element for showing captcha html\n        var bdcElements = document.getElementsByClassName('botdetect-captcha');\n\n        if (bdcElements.length === 0) {\n          return;\n        }\n        \n        // we currently support only one captcha on a page\n        var bdcElement = bdcElements[0];\n        \n        // captcha style name\n        var captchaStyleName = bdcElement.getAttribute('data-stylename');\n\n        if (!captchaStyleName) {\n          captchaStyleName = 'defaultCaptcha';\n        }\n    \n        // save captchaStyleName in window object, that will be used in Captcha.getInstance() for getting BotDetect instance\n        window['bdc_clientside_style_name'] = captchaStyleName;\n\n        addScriptToBody(settings.captchaEndpoint);\n        showHtml(captchaStyleName, bdcElement, settings.captchaEndpoint);\n      }\n    };\n  };\n  \n  Captcha.getInstance = function() {\n    var savedCaptchaStyleName = window['bdc_clientside_style_name'];\n    \n    if (!savedCaptchaStyleName) {\n      return null;\n    }\n    \n    return BotDetect.getInstanceByStyleName(savedCaptchaStyleName);\n  };\n \n  window.Captcha = Captcha;\n}(window));\n"]}