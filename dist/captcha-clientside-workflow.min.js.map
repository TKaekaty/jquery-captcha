{"version":3,"sources":["../src/captcha-clientside-workflow.js"],"names":["window","displayHtml","settings","bdcElements","document","getElementsByClassName","length","bdcElement","captchaStyleName","getAttribute","captchaHtmlUrl","commonFunctions","buildUrl","captchaEndpoint","get","c","helpers","ajax","response","status","Error","innerHTML","responseText","replace","addInitScriptToBody","bodyElement","body","getElementsByTagName","defaultSettings","String","prototype","trim","this","extend","configuredSettings","key","settingValue","xhr","x","XMLHttpRequest","e","ActiveXObject","url","callback","readyState","onreadystatechange","open","send","parseJson","jsonString","resultObj","JSON","parse","eval","params","p","push","test","join","scriptInclude","className","script","createElement","src","addScriptToBody","append","initScriptIncluded","parentNode","removeChild","captchaId","getElementById","initScriptIncludeUrl","t","value","cs","Captcha","config","init","validate","isCorrectCaptcha","captcha","getInstance","captchaCode","userInput","validationUrl","reloadImage","savedCaptchaStyleName","BotDetect","getInstanceByStyleName"],"mappings":"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","file":"captcha-clientside-workflow.min.js","sourcesContent":["(function(window) {\r\n  'use strict';\r\n  \r\n  var document = window.document,\r\n      bodyElement = document.body || document.getElementsByTagName('body')[0];\r\n  \r\n  var defaultSettings = {\r\n    captchaEndpoint: '' // e.g. '/user-app/botdetectcaptcha' or '/user-app/simplebotdetect.php' or '/user-app/BotDetectCaptcha.ashx'\r\n  };\r\n  \r\n  // Polyfill for trim() method\r\n  if (!String.prototype.trim) {\r\n    String.prototype.trim = function () {\r\n      return this.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n    };\r\n  }\r\n  \r\n  // Helper functions\r\n  var helpers = {\r\n    extend: function(configuredSettings, defaultSettings) {\r\n      var settings = {};\r\n      for (var key in defaultSettings) {\r\n        var settingValue = configuredSettings[key];\r\n        settings[key] = (typeof settingValue === 'undefined') ? defaultSettings[key] : settingValue;\r\n      }\r\n      return settings;\r\n    },\r\n    \r\n    // ajax helper\r\n    ajax: {\r\n      xhr: function() {\r\n        var x = null;\r\n        try { x = new XMLHttpRequest(); return x; } catch (e) {}\r\n        try { x = new ActiveXObject('MSXML2.XMLHTTP.5.0'); return x; } catch (e) {}\r\n        try { x = new ActiveXObject('MSXML2.XMLHTTP.4.0'); return x; } catch (e) {}\r\n        try { x = new ActiveXObject('MSXML2.XMLHTTP.3.0'); return x; } catch (e) {}\r\n        try { x = new ActiveXObject('MSXML2.XMLHTTP'); return x; } catch (e) {}\r\n        try { x = new ActiveXObject('Microsoft.XMLHTTP'); return x; } catch (e) {}\r\n        return x;\r\n      },\r\n\r\n      get: function(url, callback) {\r\n        var xhr = this.xhr();\r\n        if (xhr && xhr.readyState === 0) {\r\n          xhr.onreadystatechange = function() {\r\n            if (xhr.readyState === 4) {\r\n              callback(xhr);\r\n            }\r\n          };\r\n          xhr.open('GET', url, true);\r\n          xhr.send();\r\n        }\r\n      }\r\n    },\r\n    \r\n    parseJson: function(jsonString) {\r\n      var resultObj = null;\r\n      if (typeof(JSON) !== 'undefined' && typeof(JSON.parse) === 'function') {\r\n        resultObj = JSON.parse(jsonString);\r\n      }\r\n      if (!resultObj) {\r\n        resultObj = eval('(' + jsonString + ')');\r\n      }\r\n      return resultObj;\r\n    }\r\n    \r\n  };\r\n\r\n  // The common functions that will be shared to other javascript frameworks.\r\n  var commonFunctions = {\r\n    // build url with parameters\r\n    buildUrl: function(url, params) {\r\n      var p = [];\r\n\r\n      for (var key in params) {\r\n        if (typeof key === 'string') {\r\n          p.push(key + '=' + params[key]);\r\n        }\r\n      }\r\n\r\n      var hasParamsPattern = /\\?+/g;\r\n      return hasParamsPattern.test(url) ? (url + '&' + p.join('&')) : (url + '?' + p.join('&')); \r\n    },\r\n\r\n    // create script include element\r\n    scriptInclude: function(url, className) {\r\n      var script = document.createElement('script');\r\n          script.src = url;\r\n          script.className = className;\r\n      return script;\r\n    },\r\n\r\n    // Add BotDetect client-side script include to body element.\r\n    addScriptToBody: function(captchaEndpoint) {\r\n      if (document.getElementsByClassName('BDC_ScriptInclude').length !== 0) {\r\n        // BotDetect client-side script is already added\r\n        return;\r\n      }\r\n\r\n      // build BotDetect client-side script include url\r\n      var url = this.buildUrl(captchaEndpoint, {\r\n        get: 'script-include'\r\n      });\r\n\r\n      bodyElement.append(this.scriptInclude(url, 'BDC_ScriptInclude'));\r\n    },\r\n\r\n    // Add BotDetect init script include to body element.\r\n    addInitScriptToBody: function(captchaStyleName, captchaEndpoint) {\r\n      // remove included BotDetect init script if it exists\r\n      var initScriptIncluded = document.getElementsByClassName('BDC_InitScriptInclude');\r\n      if (initScriptIncluded.length !== 0) {\r\n        initScriptIncluded[0].parentNode.removeChild(initScriptIncluded[0]);\r\n      }\r\n\r\n      var captchaId = document.getElementById('BDC_VCID_' + captchaStyleName);\r\n\r\n      if (!captchaId) {\r\n        return;\r\n      }\r\n\r\n      // build BotDetect init script include url.\r\n      var initScriptIncludeUrl = this.buildUrl(captchaEndpoint, {\r\n        get: 'init-script-include',\r\n        c: captchaStyleName,\r\n        t: captchaId.value,\r\n        cs: '2'\r\n      });\r\n\r\n      bodyElement.append(this.scriptInclude(initScriptIncludeUrl, 'BDC_InitScriptInclude'));\r\n    }\r\n\r\n  };\r\n\r\n  // Display captcha html markup in view.\r\n  function displayHtml(settings) {\r\n    // get botdetect-captcha element for showing captcha html\r\n    var bdcElements = document.getElementsByClassName('botdetect-captcha');\r\n\r\n    if (bdcElements.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // we currently support only one captcha on a page\r\n    var bdcElement = bdcElements[0];\r\n\r\n    // captcha style name\r\n    var captchaStyleName = bdcElement.getAttribute('data-stylename');\r\n\r\n    if (!captchaStyleName) {\r\n      captchaStyleName = 'defaultCaptcha';\r\n    }\r\n\r\n    // save captchaStyleName in window object, that will be used in Captcha.getInstance() for getting BotDetect instance\r\n    window['bdc_clientside_style_name'] = captchaStyleName;\r\n\r\n    // build captcha html url\r\n    var captchaHtmlUrl = commonFunctions.buildUrl(settings.captchaEndpoint, {\r\n      get: 'html',\r\n      c: captchaStyleName\r\n    });\r\n\r\n    helpers.ajax.get(captchaHtmlUrl, function(response) {\r\n      if (response.status === 200) {\r\n        // display Captcha html\r\n        bdcElement.innerHTML = response.responseText.replace(/<script.*<\\/script>/g, '');\r\n        \r\n        // add BotDetect Init script to body\r\n        commonFunctions.addInitScriptToBody(captchaStyleName, settings.captchaEndpoint);\r\n      } else {\r\n        throw new Error('An error occurred while getting Captcha html markup.');\r\n      }\r\n    });\r\n  }\r\n  \r\n  // Captcha client-side object.\r\n  var Captcha = Captcha || {};\r\n  \r\n  Captcha.config = function(configuredSettings) {\r\n    var settings = helpers.extend(configuredSettings || {}, defaultSettings);\r\n\r\n    // remove the '/' last char of url if it exists\r\n    settings.captchaEndpoint = settings.captchaEndpoint.replace(/\\/+$/i, '');\r\n    \r\n    // display captcha html markup on the view\r\n    Captcha.init(settings);\r\n  };\r\n  \r\n  Captcha.init = function(settings) {\r\n    // add BotDetect script to body before displaying Captcha html\r\n    commonFunctions.addScriptToBody(settings.captchaEndpoint);\r\n    Captcha.displayHtml(settings);\r\n  };\r\n  \r\n  Captcha.displayHtml = function(settings) {\r\n    // display Captcha htmt markup when DOM content is loaded\r\n    if (document.readyState === 'complete') {\r\n      displayHtml(settings);\r\n    } else {\r\n      document.onreadystatechange = function() {\r\n        if (document.readyState === \"complete\") {\r\n          displayHtml(settings);\r\n        }\r\n      };\r\n    }\r\n  };\r\n  \r\n  // Perform UI captcha validation.\r\n  // It will be invoked on blur event by user.\r\n  Captcha.validate = function(callback) {\r\n    var isCorrectCaptcha = false;\r\n    \r\n    var captcha = Captcha.getInstance();\r\n\r\n    if (!captcha) {\r\n      throw new Error('BotDetect Captcha client-side instance does not exist.');\r\n    }\r\n    \r\n    var captchaCode = captcha.userInput.value.trim();\r\n\r\n    if (captchaCode.length < 1) {\r\n      return;\r\n    }\r\n\r\n    var validationUrl = captcha.validationUrl + '&i=' + captchaCode;\r\n\r\n    helpers.ajax.get(validationUrl, function(response) {\r\n      if (response.status === 200) {\r\n        isCorrectCaptcha = helpers.parseJson(response.responseText);\r\n        \r\n        // invoke user callback function and fire the validation result through the parameter.\r\n        // so user can use it for either displaying messages or checking captcha code input field status when form is submitted\r\n        callback(isCorrectCaptcha);\r\n        \r\n        // reload captcha image when validation failed\r\n        if (!isCorrectCaptcha) {\r\n          captcha.reloadImage();\r\n        }\r\n      } else {\r\n        throw new Error('An error occurred while validating Captcha.');\r\n      }\r\n    });\r\n  };\r\n  \r\n  Captcha.getInstance = function() {\r\n    var savedCaptchaStyleName = window['bdc_clientside_style_name'];\r\n    \r\n    if (!savedCaptchaStyleName) {\r\n      return null;\r\n    }\r\n\r\n    return BotDetect.getInstanceByStyleName(savedCaptchaStyleName);\r\n  };\r\n  \r\n  window.Captcha = Captcha;\r\n}(window));\r\n"]}